#!/bin/sh

PID="org.webosinternals.openssl-updater"
FORCE_INSTALL="1"

# Handle execution as pmPostInstall.script
if [ -z "$IPKG_OFFLINE_ROOT" ]; then
    IPKG_OFFLINE_ROOT=/media/cryptofs/apps
    mount -o remount,rw /
fi

APPS=/media/cryptofs/apps

[ -d ${APPS} ] || { echo "Requires webOS 1.3.5 or later" ; exit 1 ; }

SRCDIR=${APPS}/usr/palm/applications/${PID}/install

VERSION=`grep PRODUCT_VERSION_STRING /etc/palm-build-info | sed -e 's/.* webOS \([0-9.]*\).*/\1/'`

cd ${SRCDIR}

error=0

# Make sure all existing target files are in virgin condition
echo "Verifying no existing modifications to target files ..."
for file in `find usr -type f -print` ; do
    md5sum1="`cat  /md5sums    | grep    -e \*./$file$ | awk '{print $1}'`"
    md5sum2="`zcat /md5sums.gz | grep -h -e \*./$file$ | awk '{print $1}'`"
    [ ! -f "/$file" ] || \
        [ "`md5sum /$file | awk '{print $1}'`" = "$md5sum1" ] || \
        [ "`md5sum /$file | awk '{print $1}'`" = "$md5sum2" ] || \
        { echo "Verification failed on /$file" ; error=1 ; }
done

if [ "${error}" = "1" ] ; then
    if [ "${FORCE_INSTALL}" != "1" ] ; then
        echo "Device OpenSSL is not in factory condition, refusing to install replacement"
        exit 1
    else
        echo "Device OpenSSL is not in factory condition, installing replacement anyway..."
	error=0
    fi
fi

# Make a backup of all OpenSSL files
echo "Creating backup of existing OpenSSL files ..."
tar -C / -zcf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz `find usr -type f -print` || error=1

if [ "${error}" = "1" ] ; then
    echo "Fatal error occurred, unable to create backup tarball"
    exit 1
fi

# Verify the backup of all files that are about to be modified
echo "Verifying backup of existing OpenSSL files ..."
tar -C / -zdf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz || error=1

if [ "${error}" = "1" ] ; then
    echo "Fatal error occurred, unable to verify backup tarball"
    exit 1
fi

# Make sure all the target directories exist and are writeable
echo "Verifying ability to write to target directories ..."
for dir in `find usr -type d -print` ; do
    mkdir -p /$dir			|| { echo "Error creating /$dir"			; error=1 ; }
    [ -d /$dir ]			|| { echo "Unable to create /$dir"			; error=1 ; }
    rm -f /$dir/.webosinternals.org ]	|| { echo "Error removing /$dir/.webosinternals.org"	; error=1 ; }
    [ ! -f /$dir/.webosinternals.org ]	|| { echo "Unable to remove /$dir/.webosinternals.org"	; error=1 ; }
    touch /$dir/.webosinternals.org ]	|| { echo "Error touching /$dir/.webosinternals.org"	; error=1 ; }
    [ -f /$dir/.webosinternals.org ]	|| { echo "Unable to touch /$dir/.webosinternals.org"	; error=1 ; }
    rm -f /$dir/.webosinternals.org ]	|| { echo "Error removing /$dir/.webosinternals.org"	; error=1 ; }
    [ ! -f /$dir/.webosinternals.org ]	|| { echo "Unable to remove /$dir/.webosinternals.org"	; error=1 ; }
done

# Make sure all the target files are readable and writeable
echo "Verifying ability to write to target files ..."
for file in `find usr -type f -print` ; do
    [ -r ${SRCDIR}/$file ]		|| { echo "Unable to read from ${SRCDIR}/$file"		; error=1 ; }
    [ ! -f /$file ] || [ -w /$file ]	|| { echo "Unable to write to /$file"			; error=1 ; }
done

if [ "${error}" = "1" ] ; then
    echo "Fatal error occurred, not installing files"
    exit 1
fi

# Copy all the files to the target locations
echo "Installing replacement OpenSSL files ..."
for file in `find usr -type f -print` ; do
    rm -f /$file			|| { echo "Error removing /$file"			; error=1 ; }
    [ ! -f /$file ]			|| { echo "Unable to remove /$file"			; error=1 ; }
    cp ${SRCDIR}/$file /$file		|| { echo "Error installing /$file"			; error=1 ; }
    [ -f /$file ]			|| { echo "Unable to install /$file"			; error=1 ; }
    cmp ${SRCDIR}/$file /$file		|| { echo "Unable to verify /$file"			; error=1 ; }
done

if [ "${error}" = "1" ] ; then
    echo "Fatal error occurred, restoring original files"
    tar -C / -zxf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz || \
	{ echo "Fatal error occurred, unable to extract tarball" ; exit 1 ; }
    tar -C / -zdf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz || \
	{ echo "Fatal error occurred, unable to verify tarball extraction" ; exit 1 ; }
    echo "Original files restored, we have normality, I repeat we have normality"
    exit 1
fi

# Reboot
echo "Replacement OpenSSL successfully installed, rebooting in ~10 seconds"
shutdown -r now
sleep 10

exit 0
